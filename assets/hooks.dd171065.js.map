{"version":3,"file":"hooks.dd171065.js","sources":["../../node_modules/@storybook/addons/dist/esm/hooks.js"],"sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport global from 'global';\nimport { logger } from '@storybook/client-logger';\nimport { FORCE_RE_RENDER, STORY_RENDERED, UPDATE_STORY_ARGS, RESET_STORY_ARGS, UPDATE_GLOBALS } from '@storybook/core-events';\nimport { addons } from './index';\nvar globalWindow = global.window;\nexport var HooksContext = /*#__PURE__*/function () {\n  function HooksContext() {\n    var _this = this;\n\n    _classCallCheck(this, HooksContext);\n\n    this.hookListsMap = void 0;\n    this.mountedDecorators = void 0;\n    this.prevMountedDecorators = void 0;\n    this.currentHooks = void 0;\n    this.nextHookIndex = void 0;\n    this.currentPhase = void 0;\n    this.currentEffects = void 0;\n    this.prevEffects = void 0;\n    this.currentDecoratorName = void 0;\n    this.hasUpdates = void 0;\n    this.currentContext = void 0;\n\n    this.renderListener = function (storyId) {\n      if (storyId !== _this.currentContext.id) return;\n\n      _this.triggerEffects();\n\n      _this.currentContext = null;\n\n      _this.removeRenderListeners();\n    };\n\n    this.init();\n  }\n\n  _createClass(HooksContext, [{\n    key: \"init\",\n    value: function init() {\n      this.hookListsMap = new WeakMap();\n      this.mountedDecorators = new Set();\n      this.prevMountedDecorators = this.mountedDecorators;\n      this.currentHooks = [];\n      this.nextHookIndex = 0;\n      this.currentPhase = 'NONE';\n      this.currentEffects = [];\n      this.prevEffects = [];\n      this.currentDecoratorName = null;\n      this.hasUpdates = false;\n      this.currentContext = null;\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.prevEffects.forEach(function (effect) {\n        if (effect.destroy) {\n          effect.destroy();\n        }\n      });\n      this.init();\n      this.removeRenderListeners();\n    }\n  }, {\n    key: \"getNextHook\",\n    value: function getNextHook() {\n      var hook = this.currentHooks[this.nextHookIndex];\n      this.nextHookIndex += 1;\n      return hook;\n    }\n  }, {\n    key: \"triggerEffects\",\n    value: function triggerEffects() {\n      var _this2 = this;\n\n      // destroy removed effects\n      this.prevEffects.forEach(function (effect) {\n        if (!_this2.currentEffects.includes(effect) && effect.destroy) {\n          effect.destroy();\n        }\n      }); // trigger added effects\n\n      this.currentEffects.forEach(function (effect) {\n        if (!_this2.prevEffects.includes(effect)) {\n          // eslint-disable-next-line no-param-reassign\n          effect.destroy = effect.create();\n        }\n      });\n      this.prevEffects = this.currentEffects;\n      this.currentEffects = [];\n    }\n  }, {\n    key: \"addRenderListeners\",\n    value: function addRenderListeners() {\n      this.removeRenderListeners();\n      var channel = addons.getChannel();\n      channel.on(STORY_RENDERED, this.renderListener);\n    }\n  }, {\n    key: \"removeRenderListeners\",\n    value: function removeRenderListeners() {\n      var channel = addons.getChannel();\n      channel.removeListener(STORY_RENDERED, this.renderListener);\n    }\n  }]);\n\n  return HooksContext;\n}();\n\nfunction hookify(fn) {\n  return function () {\n    var _ref = typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'function' ? arguments.length <= 1 ? undefined : arguments[1] : arguments.length <= 0 ? undefined : arguments[0],\n        hooks = _ref.hooks;\n\n    var prevPhase = hooks.currentPhase;\n    var prevHooks = hooks.currentHooks;\n    var prevNextHookIndex = hooks.nextHookIndex;\n    var prevDecoratorName = hooks.currentDecoratorName;\n    hooks.currentDecoratorName = fn.name;\n\n    if (hooks.prevMountedDecorators.has(fn)) {\n      hooks.currentPhase = 'UPDATE';\n      hooks.currentHooks = hooks.hookListsMap.get(fn) || [];\n    } else {\n      hooks.currentPhase = 'MOUNT';\n      hooks.currentHooks = [];\n      hooks.hookListsMap.set(fn, hooks.currentHooks);\n      hooks.prevMountedDecorators.add(fn);\n    }\n\n    hooks.nextHookIndex = 0;\n    var prevContext = globalWindow.STORYBOOK_HOOKS_CONTEXT;\n    globalWindow.STORYBOOK_HOOKS_CONTEXT = hooks;\n    var result = fn.apply(void 0, arguments);\n    globalWindow.STORYBOOK_HOOKS_CONTEXT = prevContext;\n\n    if (hooks.currentPhase === 'UPDATE' && hooks.getNextHook() != null) {\n      throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental early return statement.');\n    }\n\n    hooks.currentPhase = prevPhase;\n    hooks.currentHooks = prevHooks;\n    hooks.nextHookIndex = prevNextHookIndex;\n    hooks.currentDecoratorName = prevDecoratorName;\n    return result;\n  };\n} // Counter to prevent infinite loops.\n\n\nvar numberOfRenders = 0;\nvar RENDER_LIMIT = 25;\nexport var applyHooks = function applyHooks(applyDecorators) {\n  return function (storyFn, decorators) {\n    var decorated = applyDecorators(hookify(storyFn), decorators.map(function (decorator) {\n      return hookify(decorator);\n    }));\n    return function (context) {\n      var _ref2 = context,\n          hooks = _ref2.hooks;\n      hooks.prevMountedDecorators = hooks.mountedDecorators;\n      hooks.mountedDecorators = new Set([storyFn].concat(_toConsumableArray(decorators)));\n      hooks.currentContext = context;\n      hooks.hasUpdates = false;\n      var result = decorated(context);\n      numberOfRenders = 1;\n\n      while (hooks.hasUpdates) {\n        hooks.hasUpdates = false;\n        hooks.currentEffects = [];\n        result = decorated(context);\n        numberOfRenders += 1;\n\n        if (numberOfRenders > RENDER_LIMIT) {\n          throw new Error('Too many re-renders. Storybook limits the number of renders to prevent an infinite loop.');\n        }\n      }\n\n      hooks.addRenderListeners();\n      return result;\n    };\n  };\n};\n\nvar areDepsEqual = function areDepsEqual(deps, nextDeps) {\n  return deps.length === nextDeps.length && deps.every(function (dep, i) {\n    return dep === nextDeps[i];\n  });\n};\n\nvar invalidHooksError = function invalidHooksError() {\n  return new Error('Storybook preview hooks can only be called inside decorators and story functions.');\n};\n\nfunction getHooksContextOrNull() {\n  return globalWindow.STORYBOOK_HOOKS_CONTEXT || null;\n}\n\nfunction getHooksContextOrThrow() {\n  var hooks = getHooksContextOrNull();\n\n  if (hooks == null) {\n    throw invalidHooksError();\n  }\n\n  return hooks;\n}\n\nfunction useHook(name, callback, deps) {\n  var hooks = getHooksContextOrThrow();\n\n  if (hooks.currentPhase === 'MOUNT') {\n    if (deps != null && !Array.isArray(deps)) {\n      logger.warn(\"\".concat(name, \" received a final argument that is not an array (instead, received \").concat(deps, \"). When specified, the final argument must be an array.\"));\n    }\n\n    var _hook = {\n      name: name,\n      deps: deps\n    };\n    hooks.currentHooks.push(_hook);\n    callback(_hook);\n    return _hook;\n  }\n\n  if (hooks.currentPhase === 'UPDATE') {\n    var _hook2 = hooks.getNextHook();\n\n    if (_hook2 == null) {\n      throw new Error('Rendered more hooks than during the previous render.');\n    }\n\n    if (_hook2.name !== name) {\n      logger.warn(\"Storybook has detected a change in the order of Hooks\".concat(hooks.currentDecoratorName ? \" called by \".concat(hooks.currentDecoratorName) : '', \". This will lead to bugs and errors if not fixed.\"));\n    }\n\n    if (deps != null && _hook2.deps == null) {\n      logger.warn(\"\".concat(name, \" received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.\"));\n    }\n\n    if (deps != null && _hook2.deps != null && deps.length !== _hook2.deps.length) {\n      logger.warn(\"The final argument passed to \".concat(name, \" changed size between renders. The order and size of this array must remain constant.\\nPrevious: \").concat(_hook2.deps, \"\\nIncoming: \").concat(deps));\n    }\n\n    if (deps == null || _hook2.deps == null || !areDepsEqual(deps, _hook2.deps)) {\n      callback(_hook2);\n      _hook2.deps = deps;\n    }\n\n    return _hook2;\n  }\n\n  throw invalidHooksError();\n}\n\nfunction useMemoLike(name, nextCreate, deps) {\n  var _useHook = useHook(name, function (hook) {\n    // eslint-disable-next-line no-param-reassign\n    hook.memoizedState = nextCreate();\n  }, deps),\n      memoizedState = _useHook.memoizedState;\n\n  return memoizedState;\n}\n/* Returns a memoized value, see https://reactjs.org/docs/hooks-reference.html#usememo */\n\n\nexport function useMemo(nextCreate, deps) {\n  return useMemoLike('useMemo', nextCreate, deps);\n}\n/* Returns a memoized callback, see https://reactjs.org/docs/hooks-reference.html#usecallback */\n\nexport function useCallback(callback, deps) {\n  return useMemoLike('useCallback', function () {\n    return callback;\n  }, deps);\n}\n\nfunction useRefLike(name, initialValue) {\n  return useMemoLike(name, function () {\n    return {\n      current: initialValue\n    };\n  }, []);\n}\n/* Returns a mutable ref object, see https://reactjs.org/docs/hooks-reference.html#useref */\n\n\nexport function useRef(initialValue) {\n  return useRefLike('useRef', initialValue);\n}\n\nfunction triggerUpdate() {\n  var hooks = getHooksContextOrNull(); // Rerun storyFn if updates were triggered synchronously, force rerender otherwise\n\n  if (hooks != null && hooks.currentPhase !== 'NONE') {\n    hooks.hasUpdates = true;\n  } else {\n    try {\n      addons.getChannel().emit(FORCE_RE_RENDER);\n    } catch (e) {\n      logger.warn('State updates of Storybook preview hooks work only in browser');\n    }\n  }\n}\n\nfunction useStateLike(name, initialState) {\n  var stateRef = useRefLike(name, // @ts-ignore S type should never be function, but there's no way to tell that to TypeScript\n  typeof initialState === 'function' ? initialState() : initialState);\n\n  var setState = function setState(update) {\n    // @ts-ignore S type should never be function, but there's no way to tell that to TypeScript\n    stateRef.current = typeof update === 'function' ? update(stateRef.current) : update;\n    triggerUpdate();\n  };\n\n  return [stateRef.current, setState];\n}\n/* Returns a stateful value, and a function to update it, see https://reactjs.org/docs/hooks-reference.html#usestate */\n\n\nexport function useState(initialState) {\n  return useStateLike('useState', initialState);\n}\n/* A redux-like alternative to useState, see https://reactjs.org/docs/hooks-reference.html#usereducer */\n\nexport function useReducer(reducer, initialArg, init) {\n  var initialState = init != null ? function () {\n    return init(initialArg);\n  } : initialArg;\n\n  var _useStateLike = useStateLike('useReducer', initialState),\n      _useStateLike2 = _slicedToArray(_useStateLike, 2),\n      state = _useStateLike2[0],\n      setState = _useStateLike2[1];\n\n  var dispatch = function dispatch(action) {\n    return setState(function (prevState) {\n      return reducer(prevState, action);\n    });\n  };\n\n  return [state, dispatch];\n}\n/*\n  Triggers a side effect, see https://reactjs.org/docs/hooks-reference.html#usestate\n  Effects are triggered synchronously after rendering the story\n*/\n\nexport function useEffect(create, deps) {\n  var hooks = getHooksContextOrThrow();\n  var effect = useMemoLike('useEffect', function () {\n    return {\n      create: create\n    };\n  }, deps);\n\n  if (!hooks.currentEffects.includes(effect)) {\n    hooks.currentEffects.push(effect);\n  }\n}\n\n/* Accepts a map of Storybook channel event listeners, returns an emit function */\nexport function useChannel(eventMap) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var channel = addons.getChannel();\n  useEffect(function () {\n    Object.entries(eventMap).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          type = _ref4[0],\n          listener = _ref4[1];\n\n      return channel.on(type, listener);\n    });\n    return function () {\n      Object.entries(eventMap).forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            type = _ref6[0],\n            listener = _ref6[1];\n\n        return channel.removeListener(type, listener);\n      });\n    };\n  }, [].concat(_toConsumableArray(Object.keys(eventMap)), _toConsumableArray(deps)));\n  return useCallback(channel.emit.bind(channel), [channel]);\n}\n/* Returns current story context */\n\nexport function useStoryContext() {\n  var _getHooksContextOrThr = getHooksContextOrThrow(),\n      currentContext = _getHooksContextOrThr.currentContext;\n\n  if (currentContext == null) {\n    throw invalidHooksError();\n  }\n\n  return currentContext;\n}\n/* Returns current value of a story parameter */\n\nexport function useParameter(parameterKey, defaultValue) {\n  var _useStoryContext = useStoryContext(),\n      parameters = _useStoryContext.parameters;\n\n  if (parameterKey) {\n    var _parameters$parameter;\n\n    return (_parameters$parameter = parameters[parameterKey]) !== null && _parameters$parameter !== void 0 ? _parameters$parameter : defaultValue;\n  }\n\n  return undefined;\n}\n/* Returns current value of story args */\n\nexport function useArgs() {\n  var channel = addons.getChannel();\n\n  var _useStoryContext2 = useStoryContext(),\n      storyId = _useStoryContext2.id,\n      args = _useStoryContext2.args;\n\n  var updateArgs = useCallback(function (updatedArgs) {\n    return channel.emit(UPDATE_STORY_ARGS, {\n      storyId: storyId,\n      updatedArgs: updatedArgs\n    });\n  }, [channel, storyId]);\n  var resetArgs = useCallback(function (argNames) {\n    return channel.emit(RESET_STORY_ARGS, {\n      storyId: storyId,\n      argNames: argNames\n    });\n  }, [channel, storyId]);\n  return [args, updateArgs, resetArgs];\n}\n/* Returns current value of global args */\n\nexport function useGlobals() {\n  var channel = addons.getChannel();\n\n  var _useStoryContext3 = useStoryContext(),\n      globals = _useStoryContext3.globals;\n\n  var updateGlobals = useCallback(function (newGlobals) {\n    return channel.emit(UPDATE_GLOBALS, {\n      globals: newGlobals\n    });\n  }, [channel]);\n  return [globals, updateGlobals];\n}"],"names":["globalWindow","global","areDepsEqual","__name","deps","nextDeps","dep","invalidHooksError","getHooksContextOrNull","getHooksContextOrThrow","hooks","useHook","name","callback","logger","_hook","_hook2","useMemoLike","nextCreate","_useHook","hook","memoizedState","useMemo","useEffect","create","effect"],"mappings":"+HAmDA,IAAIA,EAAeC,EAAO,OAkLtBC,EAAeC,EAAA,SAAsBC,EAAMC,EAAU,CACvD,OAAOD,EAAK,SAAWC,EAAS,QAAUD,EAAK,MAAM,SAAUE,EAAK,EAAG,CACrE,OAAOA,IAAQD,EAAS,EAC5B,CAAG,CACH,EAJmB,gBAMfE,EAAoBJ,EAAA,UAA6B,CACnD,OAAO,IAAI,MAAM,mFAAmF,CACtG,EAFwB,qBAIxB,SAASK,GAAwB,CAC/B,OAAOR,EAAa,yBAA2B,IACjD,CAFSG,EAAAK,EAAA,yBAIT,SAASC,GAAyB,CAChC,IAAIC,EAAQF,IAEZ,GAAIE,GAAS,KACX,MAAMH,EAAiB,EAGzB,OAAOG,CACT,CARSP,EAAAM,EAAA,0BAUT,SAASE,EAAQC,EAAMC,EAAUT,EAAM,CACrC,IAAIM,EAAQD,IAEZ,GAAIC,EAAM,eAAiB,QAAS,CAC9BN,GAAQ,MAAQ,CAAC,MAAM,QAAQA,CAAI,GACrCU,EAAO,KAAK,GAAG,OAAOF,EAAM,qEAAqE,EAAE,OAAOR,EAAM,yDAAyD,CAAC,EAG5K,IAAIW,EAAQ,CACV,KAAMH,EACN,KAAMR,CACZ,EACI,OAAAM,EAAM,aAAa,KAAKK,CAAK,EAC7BF,EAASE,CAAK,EACPA,CACR,CAED,GAAIL,EAAM,eAAiB,SAAU,CACnC,IAAIM,EAASN,EAAM,cAEnB,GAAIM,GAAU,KACZ,MAAM,IAAI,MAAM,sDAAsD,EAGxE,OAAIA,EAAO,OAASJ,GAClBE,EAAO,KAAK,wDAAwD,OAAOJ,EAAM,qBAAuB,cAAc,OAAOA,EAAM,oBAAoB,EAAI,GAAI,mDAAmD,CAAC,EAGjNN,GAAQ,MAAQY,EAAO,MAAQ,MACjCF,EAAO,KAAK,GAAG,OAAOF,EAAM,wKAAwK,CAAC,EAGnMR,GAAQ,MAAQY,EAAO,MAAQ,MAAQZ,EAAK,SAAWY,EAAO,KAAK,QACrEF,EAAO,KAAK,gCAAgC,OAAOF,EAAM;AAAA,WAAmG,EAAE,OAAOI,EAAO,KAAM;AAAA,WAAc,EAAE,OAAOZ,CAAI,CAAC,GAG5MA,GAAQ,MAAQY,EAAO,MAAQ,MAAQ,CAACd,EAAaE,EAAMY,EAAO,IAAI,KACxEH,EAASG,CAAM,EACfA,EAAO,KAAOZ,GAGTY,CACR,CAED,MAAMT,EAAiB,CACzB,CA7CSJ,EAAAQ,EAAA,WA+CT,SAASM,EAAYL,EAAMM,EAAYd,EAAM,CAC3C,IAAIe,EAAWR,EAAQC,EAAM,SAAUQ,EAAM,CAE3CA,EAAK,cAAgBF,GACtB,EAAEd,CAAI,EACHiB,EAAgBF,EAAS,cAE7B,OAAOE,CACT,CARSlB,EAAAc,EAAA,eAYF,SAASK,EAAQJ,EAAYd,EAAM,CACxC,OAAOa,EAAY,UAAWC,EAAYd,CAAI,CAChD,CAFgBD,EAAAmB,EAAA,WAkFT,SAASC,EAAUC,EAAQpB,EAAM,CACtC,IAAIM,EAAQD,IACRgB,EAASR,EAAY,YAAa,UAAY,CAChD,MAAO,CACL,OAAQO,CACd,CACG,EAAEpB,CAAI,EAEFM,EAAM,eAAe,SAASe,CAAM,GACvCf,EAAM,eAAe,KAAKe,CAAM,CAEpC,CAXgBtB,EAAAoB,EAAA"}