{"version":3,"file":"index.stories.a37aa860.js","sources":["../../src/components/notification/notification.tsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport Notification from 'rc-notification';\nimport type { NotificationInstance as RCNotificationInstance } from 'rc-notification/lib/Notification';\nimport { globalConfig } from '../config-provider';\n// import createUseNotification from './hooks/useNotification';\nimport { IconAreaYes } from '../icon/components/icon-area-success';\nimport { IconAreaInfo } from '../icon/components/icon-area-info';\nimport { IconAreaError } from '../icon/components/icon-area-error';\nimport { IconClose } from '../icon/components/icon-close';\nimport { iconPrefixCls } from '../_util/index';\nimport './style/index.less';\n\ninterface DivProps extends React.HTMLProps<HTMLDivElement> {\n  'data-testid'?: string;\n}\n\nexport type NotificationPlacement = 'top' | 'topLeft' | 'topRight' | 'bottom' | 'bottomLeft' | 'bottomRight';\n\nexport type IconType = 'success' | 'info' | 'error' | 'warning';\n\nconst notificationInstance: {\n  [key: string]: Promise<RCNotificationInstance>;\n} = {};\nlet defaultDuration = 4.5;\nlet defaultTop = 24;\nlet defaultBottom = 24;\nlet defaultPrefixCls = '';\nlet defaultPlacement: NotificationPlacement = 'topRight';\nlet defaultGetContainer: () => HTMLElement;\nlet defaultCloseIcon: React.ReactNode;\nlet rtl = false;\nlet maxCount: number;\n\nexport interface ConfigProps {\n  top?: number;\n  bottom?: number;\n  duration?: number;\n  prefixCls?: string;\n  placement?: NotificationPlacement;\n  getContainer?: () => HTMLElement;\n  closeIcon?: React.ReactNode;\n  rtl?: boolean;\n  maxCount?: number;\n  props?: DivProps;\n}\n\nfunction setNotificationConfig(options: ConfigProps) {\n  const { duration, placement, bottom, top, getContainer, closeIcon, prefixCls } = options;\n  if (prefixCls !== undefined) {\n    defaultPrefixCls = prefixCls;\n  }\n  if (duration !== undefined) {\n    defaultDuration = duration;\n  }\n  if (placement !== undefined) {\n    defaultPlacement = placement;\n  } else if (options.rtl) {\n    defaultPlacement = 'topLeft';\n  }\n  if (bottom !== undefined) {\n    defaultBottom = bottom;\n  }\n  if (top !== undefined) {\n    defaultTop = top;\n  }\n  if (getContainer !== undefined) {\n    defaultGetContainer = getContainer;\n  }\n  if (closeIcon !== undefined) {\n    defaultCloseIcon = closeIcon;\n  }\n  if (options.rtl !== undefined) {\n    rtl = options.rtl;\n  }\n  if (options.maxCount !== undefined) {\n    maxCount = options.maxCount;\n  }\n}\n\nfunction getPlacementStyle(placement: NotificationPlacement, top: number = defaultTop, bottom: number = defaultBottom) {\n  let style;\n  switch (placement) {\n    case 'top':\n      style = {\n        left: '50%',\n        transform: 'translateX(-50%)',\n        right: 'auto',\n        top,\n        bottom: 'auto',\n      };\n      break;\n    case 'topLeft':\n      style = {\n        left: 0,\n        top,\n        bottom: 'auto',\n      };\n      break;\n    case 'topRight':\n      style = {\n        right: 0,\n        top,\n        bottom: 'auto',\n      };\n      break;\n    case 'bottom':\n      style = {\n        left: '50%',\n        transform: 'translateX(-50%)',\n        right: 'auto',\n        top: 'auto',\n        bottom,\n      };\n      break;\n    case 'bottomLeft':\n      style = {\n        left: 0,\n        top: 'auto',\n        bottom,\n      };\n      break;\n    default:\n      style = {\n        right: 0,\n        top: 'auto',\n        bottom,\n      };\n      break;\n  }\n  return style;\n}\n\nfunction getNotificationInstance(\n  args: ArgsProps,\n  callback: (info: { prefixCls: string; iconPrefixCls: string; instance: RCNotificationInstance }) => void\n) {\n  const { placement = defaultPlacement, top, bottom, getContainer = defaultGetContainer, prefixCls: customizePrefixCls } = args;\n  const { getPrefixCls } = globalConfig();\n  const prefixCls = getPrefixCls('notification', customizePrefixCls || defaultPrefixCls);\n  // const iconPrefixCls = getIconPrefixCls();\n\n  const cacheKey = `${prefixCls}-${placement}`;\n  const cacheInstance = notificationInstance[cacheKey];\n\n  if (cacheInstance) {\n    Promise.resolve(cacheInstance).then((instance) => {\n      callback({ prefixCls: `${prefixCls}-notice`, iconPrefixCls, instance });\n    });\n\n    return;\n  }\n\n  const notificationClass = classNames(`${prefixCls}-${placement}`, {\n    [`${prefixCls}-rtl`]: rtl === true,\n  });\n\n  notificationInstance[cacheKey] = new Promise((resolve) => {\n    Notification.newInstance(\n      {\n        prefixCls,\n        className: notificationClass,\n        style: getPlacementStyle(placement, top, bottom),\n        getContainer,\n        maxCount,\n      },\n      (notification) => {\n        resolve(notification);\n        callback({\n          prefixCls: `${prefixCls}-notice`,\n          iconPrefixCls,\n          instance: notification,\n        });\n      }\n    );\n  });\n}\n\nconst typeToIcon = {\n  success: IconAreaYes,\n  info: IconAreaInfo,\n  error: IconAreaError,\n  warning: IconAreaInfo,\n};\n\nexport interface ArgsProps {\n  message: React.ReactNode;\n  description?: React.ReactNode;\n  btn?: React.ReactNode;\n  key?: string;\n  onClose?: () => void;\n  duration?: number | null;\n  icon?: React.ReactNode;\n  placement?: NotificationPlacement;\n  maxCount?: number;\n  style?: React.CSSProperties;\n  prefixCls?: string;\n  className?: string;\n  readonly type?: IconType;\n  onClick?: () => void;\n  top?: number;\n  bottom?: number;\n  getContainer?: () => HTMLElement;\n  closeIcon?: React.ReactNode;\n  props?: DivProps;\n}\n\nfunction getRCNoticeProps(args: ArgsProps, prefixCls: string, iconPrefixCls?: string) {\n  const {\n    duration: durationArg,\n    icon,\n    type,\n    description,\n    message,\n    btn,\n    onClose,\n    onClick,\n    key,\n    style,\n    className,\n    closeIcon = defaultCloseIcon,\n    props,\n  } = args;\n\n  const duration = durationArg === undefined ? defaultDuration : durationArg;\n\n  let iconNode: React.ReactNode = null;\n\n  if (icon) {\n    iconNode = <span className={`${prefixCls}-icon`}>{args.icon}</span>;\n  } else if (type) {\n    iconNode = React.createElement(typeToIcon[type] || null, {\n      className: `${iconPrefixCls} ${prefixCls}-icon ${prefixCls}-icon-${type}`,\n    });\n  }\n\n  const closeIconToRender = (\n    <span className={`${prefixCls}-close-x`}>{closeIcon || <IconClose className={`${prefixCls}-close-icon`} />}</span>\n  );\n\n  // const autoMarginTag = !description && iconNode ? <span className={`${prefixCls}-message-single-line-auto-margin`} /> : null;\n\n  return {\n    content: (\n      // <ConfigProvider iconPrefixCls={iconPrefixCls}>\n      <div className={iconNode ? `${prefixCls}-with-icon` : ''} role=\"alert\">\n        {iconNode}\n        <div className={`${prefixCls}-message`}>\n          {/* {autoMarginTag} */}\n          {message}\n        </div>\n        <div className={`${prefixCls}-description`}>{description}</div>\n        {btn ? <span className={`${prefixCls}-btn`}>{btn}</span> : null}\n      </div>\n      // </ConfigProvider>\n    ),\n    duration,\n    closable: true,\n    closeIcon: closeIconToRender,\n    onClose,\n    onClick,\n    key,\n    style: style || {},\n    className: classNames(className, {\n      [`${prefixCls}-${type}`]: !!type,\n    }),\n    props,\n  };\n}\n\nfunction notice(args: ArgsProps) {\n  getNotificationInstance(args, ({ prefixCls, iconPrefixCls, instance }) => {\n    instance.notice(getRCNoticeProps(args, prefixCls, iconPrefixCls));\n  });\n}\n\nconst api: any = {\n  open: notice,\n  close(key: string) {\n    Object.keys(notificationInstance).forEach((cacheKey) =>\n      Promise.resolve(notificationInstance[cacheKey]).then((instance) => {\n        instance.removeNotice(key);\n      })\n    );\n  },\n  config: setNotificationConfig,\n  destroy() {\n    Object.keys(notificationInstance).forEach((cacheKey) => {\n      Promise.resolve(notificationInstance[cacheKey]).then((instance) => {\n        instance.destroy();\n      });\n      delete notificationInstance[cacheKey]; // lgtm[js/missing-await]\n    });\n  },\n};\n\n['success', 'info', 'warning', 'error'].forEach((type) => {\n  api[type] = (args: ArgsProps) =>\n    api.open({\n      ...args,\n      type,\n    });\n});\n\napi.warn = api.warning;\n// api.useNotification = createUseNotification(getNotificationInstance, getRCNoticeProps);\n\nexport interface NotificationInstance {\n  success(args: ArgsProps): void;\n  error(args: ArgsProps): void;\n  info(args: ArgsProps): void;\n  warning(args: ArgsProps): void;\n  open(args: ArgsProps): void;\n}\n\nexport interface NotificationApi extends NotificationInstance {\n  warn(args: ArgsProps): void;\n  close(key: string): void;\n  config(options: ConfigProps): void;\n  destroy(): void;\n  // Hooks\n  // useNotification: () => [NotificationInstance, React.ReactElement];\n}\n\n/** @internal test Only function. Not work on production */\n// export const getInstance = async (cacheKey: string) => (process.env.NODE_ENV === 'test' ? notificationInstance[cacheKey] : null);\n\nexport default api as NotificationApi;\n"],"names":["notificationInstance","defaultDuration","defaultTop","defaultBottom","defaultPrefixCls","defaultPlacement","defaultGetContainer","defaultCloseIcon","rtl","maxCount","setNotificationConfig","options","duration","placement","bottom","top","getContainer","closeIcon","prefixCls","undefined","getPlacementStyle","style","left","transform","right","getNotificationInstance","args","callback","customizePrefixCls","getPrefixCls","globalConfig","cacheKey","cacheInstance","Promise","resolve","then","instance","iconPrefixCls","notificationClass","classNames","Notification","newInstance","className","notification","typeToIcon","success","IconAreaYes","info","IconAreaInfo","error","IconAreaError","warning","getRCNoticeProps","durationArg","icon","type","description","message","btn","onClose","onClick","key","props","iconNode","React","createElement","closeIconToRender","_jsx","IconClose","content","closable","notice","api","open","close","keys","forEach","removeNotice","config","destroy","Object","warn"],"mappings":"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"}