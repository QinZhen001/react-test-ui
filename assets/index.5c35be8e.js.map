{"version":3,"file":"index.5c35be8e.js","sources":["../../src/components/config-provider/index.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport type { ConfigProviderProps, ConfigConsumerProps, ProviderChildrenProps } from './types';\nimport { LocaleReceiver, LocaleProvider } from '../locale-provider/index';\nimport { ConfigConsumer, ConfigContext } from './context';\nimport type { Locale } from '../locale-provider/types';\n\nconst DEFAULT_PREFIX_CLS = 'ag';\n\nfunction getGlobalPrefixCls() {\n  return DEFAULT_PREFIX_CLS;\n}\n\nconst ProviderChildren: React.FC<ProviderChildrenProps> = (props) => {\n  const { children, locale, legacyLocale, parentContext } = props;\n\n  const getPrefixCls = React.useCallback(\n    (suffixCls?: string, customizePrefixCls?: string) => {\n      const { prefixCls } = props;\n      if (customizePrefixCls) return customizePrefixCls;\n      const mergedPrefixCls = prefixCls || DEFAULT_PREFIX_CLS;\n      return suffixCls ? `${mergedPrefixCls}-${suffixCls}` : mergedPrefixCls;\n    },\n    [props.prefixCls]\n  );\n\n  const config = {\n    ...parentContext,\n    getPrefixCls,\n    locale: locale || legacyLocale,\n  };\n\n  let childNode = children;\n\n  if (locale) {\n    childNode = <LocaleProvider locale={locale}>{childNode}</LocaleProvider>;\n  }\n  return <ConfigContext.Provider value={config}>{childNode}</ConfigContext.Provider>;\n};\n\nexport const globalConfig = () => ({\n  getPrefixCls: (suffixCls?: string, customizePrefixCls?: string) => {\n    if (customizePrefixCls) return customizePrefixCls;\n    return suffixCls ? `${getGlobalPrefixCls()}-${suffixCls}` : getGlobalPrefixCls();\n  },\n  getRootPrefixCls: (rootPrefixCls?: string, customizePrefixCls?: string) => {\n    // Customize rootPrefixCls is first priority\n    if (rootPrefixCls) {\n      return rootPrefixCls;\n    }\n\n    // If Global prefixCls provided, use this\n    if (DEFAULT_PREFIX_CLS) {\n      return DEFAULT_PREFIX_CLS;\n    }\n\n    // [Legacy] If customize prefixCls provided, we cut it to get the prefixCls\n    if (customizePrefixCls && customizePrefixCls.includes('-')) {\n      return customizePrefixCls.replace(/^(.*)-[^-]*$/, '$1');\n    }\n\n    // Fallback to default prefixCls\n    return getGlobalPrefixCls();\n  },\n});\n\nexport const ConfigProvider: FC<ConfigProviderProps> = (props) => {\n  const { prefixCls } = props;\n  const suffixCls = props.locale?.locale;\n  const className = prefixCls ? `${prefixCls}-${suffixCls}` : suffixCls;\n\n  return (\n    <LocaleReceiver>\n      {(_, __, legacyLocale) => (\n        <div className={className}>\n          <ConfigConsumer>\n            {(context) => <ProviderChildren parentContext={context} legacyLocale={legacyLocale as Locale} {...props} />}\n          </ConfigConsumer>\n        </div>\n      )}\n    </LocaleReceiver>\n  );\n};\n"],"names":["DEFAULT_PREFIX_CLS","getGlobalPrefixCls","__name","ProviderChildren","props","children","locale","legacyLocale","parentContext","getPrefixCls","React","suffixCls","customizePrefixCls","prefixCls","mergedPrefixCls","config","childNode","_jsx","ConfigContext","globalConfig","rootPrefixCls","ConfigProvider","_a","className","LocaleReceiver","_","__","ConfigConsumer","context"],"mappings":"oOAMA,MAAAA,EAAA,KAEA,SAAAC,GAAA,CACE,OAAAD,CACF,CAFAE,EAAAD,EAAA,sBAIA,MAAAE,EAAAD,EAAAE,GAAA,CACE,KAAA,CAAM,SAAAC,EAAEA,OAAAA,EAAUC,aAAAA,EAAQC,cAAAA,CAAcC,EAAAA,EAExCC,EAAAC,EAAA,YAAA,CAAAC,EAAAC,IAAA,CAEI,KAAA,CAAM,UAAAC,CAAEA,EAAAA,EACR,GAAAD,EAAwB,OAAAA,EACxB,MAAAE,EAAAD,GAAAb,EACA,OAAAW,EAAA,GAAAG,KAAAH,IAAAG,CAAuDA,EAAAA,CAAAA,EAAAA,SAAAA,CAAAA,EAK3DC,EAAA,CAAe,GAAAP,EACVA,aAAAA,EACHC,OAAAA,GAAAA,CACkBF,EAGpB,IAAAS,EAAAX,EAEA,OAAAC,IACEU,EAAAA,EAAAA,EAAAA,CAA2B,OAAAV,EAAC,SAAAU,CAAiBA,CAAAA,GAE/CC,EAAAC,EAAA,SAAA,CAA8B,MAAAH,EAAQA,SAAAA,CAASC,CAAAA,CACjD,EAzBA,oBA2BOG,EAAAjB,EAAA,KAAA,CAA4B,aAAA,CAAAS,EAAAC,IAE/BA,IACAD,EAAA,GAAAV,EAAA,KAAAU,IAAAV,KACF,iBAAA,CAAAmB,EAAAR,IAGEQ,GAMEpB,CAWN,GAxBO,gBA0BAqB,EAAAnB,EAAAE,GAAA,OACL,KAAA,CAAM,UAAAS,CAAEA,EAAAA,EACRF,GAAAW,EAAAlB,EAAA,SAAA,YAAAkB,EAAA,OACAC,EAAAV,EAAA,GAAAA,KAAAF,IAAAA,EAEA,OAAAM,EAAAO,EAAA,CACiB,SAAA,CAAAC,EAAAC,EAAAnB,IAAAU,EAAA,MAAA,CAEX,UAAAM,EAAK,SAAAN,EAAAU,EAAA,CACY,SAAAC,GAAAX,EAAAd,EAAA,CACkB,cAAAyB,EAAgBA,aAAAA,EAAS,GAAAxB,CAA0CA,CAAAA,CAAK,CAAA,CAAI,CAAA,CAC5F,CAAA,CAK3B,EAhBO"}