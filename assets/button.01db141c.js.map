{"version":3,"file":"button.01db141c.js","sources":["../../src/components/button/button.tsx"],"sourcesContent":["import React, { FC, useContext } from 'react';\nimport { ConfigContext } from '../config-provider/context';\nimport classNames from 'classnames';\nimport { BaseProps } from '../../types/index';\nimport { tuple } from '../_util/type';\nimport './style/index.less';\n\nexport const buttonTypes = tuple('primary', 'secondary', 'outline');\nexport type ButtonType = typeof buttonTypes[number];\nexport const buttonShapes = tuple('default', 'circle', 'round');\nexport type ButtonShape = typeof buttonShapes[number];\nexport const buttonHTMLTypes = tuple('submit', 'button', 'reset');\nexport type ButtonHTMLType = typeof buttonHTMLTypes[number];\nexport const sizeTypes = tuple('small', 'middle', 'large');\nexport type SizeType = typeof sizeTypes[number];\n\nexport interface ButtonProps extends BaseProps, Omit<React.ButtonHTMLAttributes<any>, 'type' | 'onClick'> {\n  type?: ButtonType;\n  icon?: React.ReactNode;\n  shape?: ButtonShape;\n  size?: SizeType;\n  disabled?: boolean;\n  loading?: boolean | { delay?: number };\n  htmlType?: ButtonHTMLType;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n  error?: boolean;\n  success?: boolean;\n  warning?: boolean;\n  // block?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const Button: FC<ButtonProps> = (props) => {\n  const {\n    loading = false,\n    prefixCls: customizePrefixCls,\n    type = 'primary',\n    shape = 'default',\n    size = 'middle',\n    disabled,\n    className,\n    children,\n    icon,\n    htmlType = 'button',\n    error = false,\n    success = false,\n    warning = false,\n    ...rest\n  } = props;\n\n  // const [innerLoading, setLoading] = React.useState<Loading>(!!loading);\n  const { getPrefixCls } = useContext(ConfigContext);\n  // const buttonRef = (ref as any) || React.createRef<HTMLElement>();\n  const prefixCls = getPrefixCls('btn', customizePrefixCls);\n  const sizeClassNameMap = { large: 'lg', small: 'sm', middle: undefined };\n  const sizeFullname = size;\n  const sizeCls = sizeFullname ? sizeClassNameMap[sizeFullname] || '' : '';\n\n  const classes = classNames(\n    prefixCls,\n    {\n      [`${prefixCls}-${shape}`]: shape !== 'default' && shape, // Note: Shape also has `default`\n      [`${prefixCls}-${type}`]: type,\n      [`${prefixCls}-${sizeCls}`]: sizeCls,\n      // [`${prefixCls}-icon-only`]: !children && children !== 0 && !!iconType,\n      // [`${prefixCls}-background-ghost`]: ghost && !isUnBorderedButtonType(type),\n      // [`${prefixCls}-loading`]: innerLoading,\n      // [`${prefixCls}-two-chinese-chars`]:\n      //   hasTwoCNChar && autoInsertSpace && !innerLoading,\n      // [`${prefixCls}-block`]: block,\n      // [`${prefixCls}-dangerous`]: !!danger,\n      // [`${prefixCls}-rtl`]: direction === 'rtl',\n      [`${prefixCls}-disabled`]: !!disabled,\n      [`${prefixCls}-error`]: !!error,\n      [`${prefixCls}-success`]: !!success,\n      [`${prefixCls}-warning`]: !!warning,\n      // linkButtonRestProps.href !== undefined && mergedDisabled,\n    },\n    // compactItemClassnames,\n    className\n  );\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>) => {\n    const { onClick } = props;\n    // https://github.com/ant-design/ant-design/issues/30207\n    // if (innerLoading || mergedDisabled) {\n    //   e.preventDefault();\n    //   return;\n    // }\n    (onClick as React.MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>)?.(e);\n  };\n\n  const buttonNode = (\n    <button {...rest} type={htmlType} className={classes} onClick={handleClick} disabled={disabled}>\n      {icon}\n      {/* {kids} */}\n      {children}\n    </button>\n  );\n\n  return buttonNode;\n};\n\nexport default Button;\n"],"names":["buttonTypes","tuple","sizeTypes","Button","__name","props","loading","customizePrefixCls","shape","size","disabled","className","children","icon","error","success","warning","rest","getPrefixCls","prefixCls","sizeClassNameMap","undefined","sizeFullname","sizeCls","classes","classNames","type","_jsxs","htmlType","e","onClick","handleClick","Button$1"],"mappings":"6PAOO,MAAAA,EAAAC,EAAA,UAAA,YAAA,SAAA,EAEAA,EAAA,UAAA,SAAA,OAAA,EAEAA,EAAA,SAAA,SAAA,OAAA,EAEA,MAAAC,EAAAD,EAAA,QAAA,SAAA,OAAA,EAmBAE,EAAAC,EAAAC,GAAA,CACL,KAAA,CAAM,QAAAC,EAAA,GACM,UAAAC,EACCA,KAAAA,EAAAA,UACJ,MAAAC,EAAA,UACC,KAAAC,EAAA,SACD,SAAAC,EACPA,UAAAA,EACAC,SAAAA,EACAC,KAAAA,EACAC,SAAAA,EAAAA,SACW,MAAAC,EAAA,GACH,QAAAC,EAAA,GACE,QAAAC,EAAA,MACAC,CACPA,EAAAA,EAIL,CAAM,aAAAC,CAAEA,EAAAA,EAAAA,QAAAA,WAAAA,CAAAA,EAERC,EAAAD,EAAA,MAAAX,CAAA,EACAa,EAAA,CAAyB,MAAA,KAAS,MAAA,KAAa,OAAA,MAAcC,EAC7DC,EAAAb,EACAc,EAAAD,GAAAF,EAAAE,IAAA,GAEAE,EAAAC,EAAgBA,EACdN,CACA,CAAA,GAAAA,KAAAX,KAAAA,IAAA,WAAAA,EACoDA,CAAAA,GAAAA,KAAAA,KAAAA,EACxBkB,CAAAA,GAAAA,KAAAA,KAAAA,EACGH,CAAAA,GAAAA,cAAAA,CAAAA,CAAAA,EASAb,CAAAA,GAAAA,WAAAA,CAAAA,CAAAA,EACHI,CAAAA,GAAAA,aAAAA,CAAAA,CAAAA,EACEC,CAAAA,GAAAA,aAAAA,CAAAA,CAAAA,CACAC,EAE9BL,CAEAA,EAqBF,OARAgB,EAAA,SAAA,CACE,GAAAV,EAAYA,KAAAA,EAAYW,UAAAA,EAAqBJ,QAX/CpB,EAAAyB,GAAA,CACE,KAAA,CAAM,QAAAC,CAAEA,EAAAA,EAMRA,GAAA,MAAAA,EAAAD,EAA+E,EAPjF,eAWiEE,SAAAA,EAAa,SAAA,CAAAlB,EAAAD,CAAA,CAGjE,CAAA,CAKf,EArEO,UAuEPoB,EAAA7B"}