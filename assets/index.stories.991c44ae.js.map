{"version":3,"file":"index.stories.991c44ae.js","sources":["../../src/components/badge/badge.tsx"],"sourcesContent":["import React, { FC, useMemo, useRef } from 'react';\nimport { ConfigContext } from '../config-provider/context';\nimport { cloneElement } from '../_util/index';\nimport CSSMotion from 'rc-motion';\nimport classNames from 'classnames';\nimport { BaseProps } from '../../types';\nimport './style/index.less';\n\nexport interface BadgeProps extends BaseProps {\n  /** Number to show in badge */\n  count?: number | string;\n  showZero?: boolean;\n  /** Max count to show */\n  overflowCount?: number;\n  /** Whether to show red dot without number */\n  dot?: boolean;\n  scrollNumberPrefixCls?: string;\n  className?: string;\n  // status?: PresetStatusColorType;\n  // color?: LiteralUnion<PresetColorType, string>;\n  // text?: React.ReactNode;\n  size?: 'default' | 'small';\n  offset?: [number | string, number | string];\n  // title?: string;\n  children?: React.ReactNode;\n}\n\nexport const Badge: FC<BadgeProps> = ({\n  prefixCls: customizePrefixCls,\n  scrollNumberPrefixCls: customizeScrollNumberPrefixCls,\n  children,\n  count,\n  overflowCount = 99,\n  dot = false,\n  size = 'default',\n  offset,\n  style,\n  className,\n  showZero = false,\n  ...restProps\n}) => {\n  const { getPrefixCls } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('badge', customizePrefixCls);\n\n  // ================================ Misc ================================\n  const numberedDisplayCount = ((count as number) > (overflowCount as number) ? `${overflowCount}+` : count) as string | number | null;\n\n  const isZero = numberedDisplayCount === '0' || numberedDisplayCount === 0;\n  // const ignoreCount = count === null || isZero;\n  const showAsDot = dot && !isZero;\n  const mergedCount = showAsDot ? '' : numberedDisplayCount;\n\n  const isHidden = useMemo(() => {\n    const isEmpty = mergedCount === null || mergedCount === undefined || mergedCount === '';\n    return (isEmpty || (isZero && !showZero)) && !showAsDot;\n  }, [mergedCount, isZero, showZero, showAsDot]);\n\n  // Count should be cache in case hidden change it\n  // const countRef = useRef(count);\n  // if (!isHidden) {\n  //   countRef.current = count;\n  // }\n  // const livingCount = countRef.current;\n\n  // We need cache count since remove motion should not change count display\n  // const displayCountRef = useRef(mergedCount);\n  // if (!isHidden) {\n  //   displayCountRef.current = mergedCount;\n  // }\n  // const displayCount = displayCountRef.current;\n\n  // We will cache the dot status to avoid shaking on leaved motion\n  const isDotRef = useRef(showAsDot);\n  if (!isHidden) {\n    isDotRef.current = showAsDot;\n  }\n\n  // =============================== Styles ===============================\n  const mergedStyle = useMemo<React.CSSProperties>(() => {\n    if (!offset) {\n      return { ...style };\n    }\n    const offsetStyle: React.CSSProperties = {\n      marginTop: offset[1],\n      right: parseInt(offset[0] as string, 10),\n    };\n\n    return {\n      ...offsetStyle,\n      ...style,\n    };\n  }, [offset, style]);\n\n  const isDot = isDotRef.current;\n  const badgeClassName = classNames(\n    prefixCls,\n    {\n      [`${prefixCls}-not-a-wrapper`]: !children,\n      [`${prefixCls}-dot`]: isDot,\n      [`${prefixCls}-count`]: !isDot,\n      [`${prefixCls}-count-sm`]: size === 'small',\n      [`${prefixCls}-children`]: !!children,\n      [`${prefixCls}-multiple-words`]: !isDot && numberedDisplayCount && numberedDisplayCount.toString().length > 1,\n    },\n    className\n  );\n\n  const badgeWrapperClassName = classNames({\n    [`${prefixCls}-has-child`]: !!children,\n  });\n\n  return (\n    <span className={badgeWrapperClassName}>\n      {children}\n      <span {...restProps} style={mergedStyle} className={badgeClassName}>\n        {!isHidden && !isDot ? numberedDisplayCount : null}\n      </span>\n    </span>\n  );\n};\n\nexport default Badge;\n"],"names":["Badge","__name","customizePrefixCls","customizeScrollNumberPrefixCls","children","count","dot","size","offset","style","className","restProps","getPrefixCls","prefixCls","numberedDisplayCount","overflowCount","isZero","showAsDot","mergedCount","isHidden","useMemo","showZero","isDotRef","useRef","mergedStyle","offsetStyle","isDot","badgeClassName","classNames","badgeWrapperClassName","_jsxs"],"mappings":"iTA2BO,MAAAA,EAAAC,EAAA,CAAA,CAA+B,UAAAC,EACzBA,sBAAAA,EACYC,SAAAA,EACvBC,MAAAA,EACAC,cAAAA,EAAAA,GACgB,IAAAC,EAAA,GACV,KAAAC,EAAA,UACC,OAAAC,EACPA,MAAAA,EACAC,UAAAA,EACAC,SAAAA,EAAAA,MACWC,CAEb,IAAA,CACE,KAAA,CAAM,aAAAC,CAAEA,EAAAA,EAAAA,WAAAA,CAAAA,EACRC,EAAAD,EAAA,QAAAV,CAAA,EAGAY,EAAAT,EAAAU,EAAA,GAAAA,KAAAV,EAEAW,EAAAF,IAAA,KAAAA,IAAA,EAEAG,EAAAX,GAAA,CAAAU,EACAE,EAAAD,EAAA,GAAAH,EAEAK,EAAAC,EAAAA,QAAAA,QAAA,KACEF,GAAA,MAAAA,IAAA,IACAF,GAAA,CAAAK,IAAA,CAAAJ,EAA8CA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAkBhDK,EAAAC,iBAAAN,CAAA,EACAE,IACEG,EAAAA,QAAAA,GAIF,MAAAE,EAAAJ,EAAAA,QAAAA,QAAA,IACEZ,EAQA,CAAO,GALP,CAAyC,UAAAA,EAAA,GACrB,MAAA,SAAAA,EAAA,GAAA,EAAA,CACqB,EAIpCiB,GAAAA,CACAhB,EATH,CAAO,GAAAA,CAAKA,EAUd,CAAAD,EAAAC,CAAA,CAAA,EAGFiB,EAAAJ,EAAA,QACAK,EAAAC,EAAAf,EAAA,CAEE,CAAA,GAAAA,mBAAA,CAAAT,EACmCA,CAAAA,GAAAA,SAAAA,EACXsB,CAAAA,GAAAA,WAAAA,CAAAA,EACGA,CAAAA,GAAAA,cAAAA,IAAAA,QACW,CAAA,GAAAb,cAAA,CAAA,CAAAT,EACPA,CAAAA,GAAAA,oBAAAA,CAAAA,GAAAA,GAAAA,EAAAA,WAAAA,OAAAA,CAC+E,EAAAM,CAAA,EAKhHmB,EAAAD,EAAA,CAAyC,CAAA,GAAAf,eAAA,CAAA,CAAAT,CACTA,CAAAA,EAGhC,OAAA0B,EAAA,OAAA,CACE,UAAAD,EAAiBA,SAAAA,CAAAA,EAAAA,EAAAA,OAAAA,CAEf,GAAAlB,EAAUA,MAAAA,EAAkBa,UAAAA,EAAwBG,SAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,IACJ,CAAA,CAAA,CACzC,CAAA,CAGb,EA5FO"}